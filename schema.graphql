# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type AddProductToCartMutation {
    cart: CartType
    message: String
    success: Boolean
}

type BillingType {
    address: String!
    city: String!
    id: ID!
    lastUsed: DateTime
    name: String!
    phone: String!
    purchaseSet: [PurchaseType!]!
    state: String!
    user: UserType!
    zip: String!
}

type CartType {
    cartProducts: [ProductThroughModelType!]!
    id: ID!
    products: [ProductThroughModelType]
    user: UserType!
}

type CategoryType {
    id: ID!
    name: String!
    productSet: [ProductType!]!
}

type Mutation {
    addProductToCart(productId: ID!, quantity: Int): AddProductToCartMutation
    addUpdateCategory(id: ID, name: String): UpsertCategoryMutation
    purchase(billingId: ID!, shippingId: ID!): PurchaseMutation
    signIn(password: String, username: String): SignInMutation
    signOut: SignOutMutation
    updateProduct(input: ProductMutationInput): UpsertProductMutation
    updateShippingBilling(billing: BillingInputType, shipping: ShippingInputType): UpdateShippingBillingMutation
    uploadProductPicture(file: Upload!, id: ID): UploadMutation
    userEdit(email: String, firstName: String, lastName: String): UserEditMutation
}

type ProductThroughModelType {
    cart: CartType!
    id: ID!
    product: ProductType!
    quantity: Int!
}

type ProductType {
    cartProducts: [ProductThroughModelType!]!
    cartSet: [CartType!]!
    category: CategoryType!
    description: String!
    id: ID!
    name: String!
    price: Float!
    productPic: String
    purchaseSet: [PurchaseType!]!
    qtyInStock: Int!
    skuNumber: Int!
    slug: String!
}

type PurchaseMutation {
    cart: CartType
}

type PurchaseType {
    billing: BillingType
    id: ID!
    products: [ProductType!]!
    shipping: ShippingType
    user: UserType!
}

type Query {
    allCategories: [CategoryType]
    allProducts: [ProductType]
    billingInfo(id: Int): BillingType
    cart: CartType
    currentUser: UserType
    getProduct(id: Int, slug: String): ProductType
    shippingInfo(id: Int): ShippingType
}

type ShippingType {
    address: String!
    city: String!
    id: ID!
    lastUsed: DateTime
    name: String!
    phone: String!
    purchaseSet: [PurchaseType!]!
    state: String!
    user: UserType!
    zip: String!
}

type SignInMutation {
    user: UserType
}

type SignOutMutation {
    currentUser: UserType
}

type UpdateShippingBillingMutation {
    billing: BillingType
    shipping: ShippingType
}

type UploadMutation {
    product: ProductType
}

type UpsertCategoryMutation {
    category: CategoryType
}

type UpsertProductMutation {
    product: ProductType
}

type UserEditMutation {
    userEdit: UserType
}

type UserType {
    billingSet: [BillingType!]!
    cart: CartType
    dateJoined: DateTime!
    email: String!
    firstName: String!
    id: ID!
    "Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
    isActive: Boolean!
    "Designates whether the user can log into this admin site."
    isStaff: Boolean!
    "Designates that this user has all permissions without explicitly assigning them."
    isSuperuser: Boolean!
    lastLogin: DateTime
    lastName: String!
    password: String!
    purchaseSet: [PurchaseType!]!
    shippingSet: [ShippingType!]!
    "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
    username: String!
}

input BillingInputType {
    address: String!
    city: String!
    name: String!
    phone: String!
    state: String!
    zip: String!
}

input ProductMutationInput {
    category: String
    description: String
    id: ID
    name: String
    price: Float
    productImage: Upload
    qtyInStock: Int
    skuNumber: String
    slug: String
}

input ShippingInputType {
    address: String!
    city: String!
    name: String!
    phone: String!
    state: String!
    zip: String!
}


"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
Create scalar that ignores normal serialization/deserialization, since
that will be handled by the multipart request spec
"""
scalar Upload
